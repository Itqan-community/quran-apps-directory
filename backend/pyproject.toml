[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "quran-apps-directory"
version = "1.0.0"
description = "A comprehensive bilingual directory of Islamic applications"
authors = [
    {name = "ITQAN Community", email = "connect@itqan.dev"}
]
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

[project.urls]
Homepage = "https://github.com/Itqan-community/quran-apps-directory"
Documentation = "https://github.com/Itqan-community/quran-apps-directory/docs"
Repository = "https://github.com/Itqan-community/quran-apps-directory.git"
Issues = "https://github.com/Itqan-community/quran-apps-directory/issues"

[tool.setuptools.packages.find]
include = ["config*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "django"
multi_line_output = 3
line_length = 88
known_first_party = ["config", "apps", "core", "categories", "developers"]
known_third_party = ["django", "rest_framework", "drf_spectacular"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
plugins = ["mypy_django_plugin.main"]
django_settings_module = "config.settings.local"

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.local --reuse-db --import-mode=importlib"
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py",
]
testpaths = ["tests"]
DJANGO_SETTINGS_MODULE = "config.settings.local"

[tool.coverage.run]
source = ["."]
omit = [
    "*/venv/*",
    "*/migrations/*",
    "manage.py",
    "*/tests/*",
    "*/venv/*",
    "*/virtualenvs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"*/migrations/*" = ["ALL"]

[tool.djlint]
profile = "django"
ignore = "H021,H030"
indent = 4
max_line_length = 88