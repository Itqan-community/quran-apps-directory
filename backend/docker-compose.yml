version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: quran_apps_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: quran_apps_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d quran_apps_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - quran_apps_network

  # Django Backend API (Development)
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: quran_apps_web
    restart: unless-stopped
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      DEBUG: "True"
      DJANGO_SETTINGS_MODULE: config.settings.local
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: quran_apps_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_HOST: db
      DB_PORT: "5432"
      SECRET_KEY: "django-insecure-dev-key-change-in-production"
      ALLOWED_HOSTS: "localhost,127.0.0.1,0.0.0.0"
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - quran_apps_network

  # Optional: Redis for caching (uncomment when ready)
  # redis:
  #   image: redis:7-alpine
  #   container_name: quran_apps_redis
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - quran_apps_network

volumes:
  postgres_data:
    driver: local
  # redis_data:
  #   driver: local

networks:
  quran_apps_network:
    driver: bridge