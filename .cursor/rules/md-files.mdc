---
globs: "*.md"
alwaysApply: true
---

# Markdown File Organization Rule

## When to Create .md Files
**Only create .md files for PERMANENT, USEFUL documentation.** Do NOT create temporary files for:
- Troubleshooting logs or fixes
- Issue resolution notes
- Temporary status updates
- One-time problem solutions

## When TO Create .md Files
Create documentation for:
- **Project setup guides** (deployment, development setup)
- **API documentation** (endpoints, usage)
- **User guides** (how to use features)
- **Architecture documentation** (system design, workflows)
- **Contributing guidelines** (for other developers)
- **Configuration references** (environment variables, settings)

## File Structure
- Place documentation files in `docs/` folder
- Use descriptive filenames (e.g., `deployment-guide.md`, `api-reference.md`)
- Organize by category if needed (e.g., `docs/deployment/`, `docs/development/`)

## Examples of GOOD .md files
- `docs/deployment-guide.md` - How to deploy the application
- `docs/development-setup.md` - Local development environment setup
- `docs/api-reference.md` - API endpoints and usage
- `docs/workflow.md` - Git workflow and branch strategy
- `docs/contributing.md` - How to contribute to the project

## Examples of BAD .md files (don't create these)
- `dns-troubleshooting.md` - Temporary fix documentation
- `issue-resolution.md` - One-time problem solving
- `debug-session.md` - Temporary debugging notes
- `quick-fixes.md` - Temporary solutions

## Exceptions (Stay in Root)
- `README.md` - Project overview
- `CHANGELOG.md` - Version history
- `LICENSE.md` - License information

## Guidelines
- Before creating any .md file, ask: "Will this be useful in 6 months?"
- If it's documenting a temporary fix or troubleshooting session, DON'T create it
- Focus on creating documentation that helps future developers understand and work with the project
- When moving existing markdown files, follow the same permanent/temporary evaluation
